<?php
define('HONOR_PROFILE', 14);
define('CREATE_DRUPAL_USER', TRUE);

/*
 * Implementation of CiviCRM pre hook
 * if we are trying to save a profile & the honor fields are set then
 * we need to stash them the values- then when the membership is saved
 * we'll be able to get the contact id of the honor contact to re-assign thme
 * to match against when trying to grab the id
 */
function gift_memberships_civicrm_pre($op, $objectName, $objectId, &$objectRef) {
  // this is the point where the honor contact is saved
  if($objectName == 'Profile'){
    $honor_fields = array(
      'honor_first_name' => 1,
      'honor_last_name' => 1,
      'honor_email' => 1,
      'honor_prefix_id' => 1,
    );
    $honor_fields = array_intersect_key($objectRef, $honor_fields)
      + CRM_Utils_Array::value('honor_', $objectRef, array());
    if(count($honor_fields > 0)){
      gift_memberships_contribution_singleton($honor_fields);
    }
  }
  // now we can re-assign the membership
  if ($objectName == 'Membership') {
    $recipient = gift_memberships_contribution_singleton();
    if(is_numeric($recipient)){
      $objectRef['contact_id'] = $recipient;
    }
    gift_memberships_create_drupal_user($recipient);
  }
}
/*
 * Add the honor profile into the contribution page
 * - hopefully we'll get contribution pages as profiles into core
 */
function gift_memberships_civicrm_buildForm($formName, &$form){

  if($formName == 'CRM_Contribute_Form_Contribution_Main'){
    require_once 'CRM/Profile/Form/ProfileContact.php';
    CRM_Profile_Form_ProfileContact::preProcess( $form, 'honor_', HONOR_PROFILE );
    CRM_Profile_Form_ProfileContact::buildQuickForm( $form, 'Individual','Gift Membership','honor_' );
  }

}

/*
 * Implementation of CiviCRM _civicrm_post hook
 * this is the only point we have the honor_contact id so we grab it here & stash it
 * for when the membership is about to be saved
 * http://wiki.civicrm.org/confluence/display/CRMDOC33/CiviCRM+hook+specification#CiviCRMhookspecification-hookcivicrmpost
 */
function gift_memberships_civicrm_post( $op, $objectName, $objectId, &$objectRef ) {
  if($objectName == 'Individual'){
    gift_memberships_contribution_singleton(array(),$objectRef);
  }
}

/*
 * Implementation of CiviCRM _civicrm_tokens hook
*http://wiki.civicrm.org/confluence/display/CRMDOC33/CiviCRM+hook+specification#CiviCRMhookspecification-hookcivicrmtokens
*/
function gift_memberships_civicrm_tokens( &$tokens ) {
  $tokens['gift_membership'] = array(
    'gift_membership.honor_contact_username' => 'Gift Member Username',
    'gift_membership.honor_contact_password' => 'Gift Member Password',
  );
}
/*
 * Implementation of CiviCRM _civicrm_tokens hook
*http://wiki.civicrm.org/confluence/display/CRMDOC33/CiviCRM+hook+specification#CiviCRMhookspecification-hookcivicrmtokens
*/
function gift_memberships_civicrm_tokenValues( &$values, $cids, $job, $tokens = array(), $context = null ) {
  $user = gift_memberships_singleton();
  if(!$context == 'CRM_Core_BAO_MessageTemplate' || empty($user)){
    return;
  }

  $values[$cids['contact_id']]['gift_membership.honor_contact_username'] = $user['mail'];
  $values[$cids['contact_id']]['gift_membership.honor_contact_password'] = $user['pass'];
}
/*
* In order to indentify the honor contact we need to store the fields when the contact
* is being created off the profile. Then on the post hook we can compare
* the fields to see if we have a match & if so return the id of the contact
* - then we swap over the membership
*/

function gift_memberships_contribution_singleton($honor_fields = null, $contact_object = null, $force = NULL) {
  static $honorcontactsingleton = array();
  if(!empty($honor_fields) || $force){
    $honorcontactsingleton = $honor_fields;
  }

  if(!empty($contact_object) && !empty($honorcontactsingleton)){
    // We are assuming first name & last name are required fields
    if($contact_object->first_name == $honorcontactsingleton['first_name']
    && $contact_object->last_name == $honorcontactsingleton['last_name']){
      $honorcontactsingleton['contact_id'] = $contact_object->id;
    }
  }
  return CRM_Utils_Array::value('contact_id',$honorcontactsingleton);
}
/**
 *
 * @param integet $address_id
 * @param array $address_array
 * @return integer id of address
 */
function gift_memberships_address_singleton($address_id = null, $address_array = null){
  static $addressID = null;
  static $addressArray = null;
  if(!empty($address_id)){
    $addressID = $address_id;
  }
  if(!empty( $address_array)){
    $addressArray = $address_array;
  }

  if(!empty($addressArray)){
    // so, this is an edit so we will duplicate the address rather than changing the contact
    unset($address_array['id']);
    return $address_array;
  }
  return $addressID;

}
/**
 * Implementation of hook_civicrm_config - we register our template directory here
*/


function gift_memberships_civicrm_config(&$config) {
  $template =& CRM_Core_Smarty::singleton();
   $extRoot = dirname( __FILE__ ) . DIRECTORY_SEPARATOR;
  $extDir = $extRoot . 'templates';
  if ( is_array( $template->template_dir ) ) {
   array_unshift( $template->template_dir, $extDir );
  } else {
    $template->template_dir = array( $extDir, $template->template_dir );
  }
    $include_path = $extRoot . PATH_SEPARATOR . get_include_path( );
    set_include_path( $include_path );
}

/*
 * Create drupal user account (if required) & stash the details
 *
 *
 */

function gift_memberships_create_drupal_user($recipient, $retrieve = false){
  if(!CREATE_DRUPAL_USER){
    return;
  }
  $user = array('recipient' => $recipient);

  //check for existing matched user account
  //nb not domain sensitive - should default to current domain @ api level
  $ufmatch = civicrm_api('uf_match', 'get', array('version' => 3, 'contact_id' => $recipient, 'sequential' => 1) );
  if($ufmatch['count'] == 1){
    $user['uid'] = $ufmatch['values'][0]['uf_id'];
    return gift_memberships_singleton($user);
  }

  //now lets use the civicrm sync mechanism to see if Civi can match the contact to an existing user
  $contact = civicrm_api('contact', 'getsingle', array('version' => 3, 'id' => $recipient, 'sequential' => 1, 'return' => 'email,display_name,first_name,last_name') );
  $params = array(
    'name' => $contact['display_name'],
    'mail' => $contact['email'],
    'email' =>  $contact['email']);
  $errors = array();
  $config = CRM_Core_Config::singleton();
  $config->userSystem->checkUserNameEmailExists($params, $errors);

  if(!empty($errors)){
    echo "undiagnosed error";
    die;
  }
  $params['cms_name'] = $params['name'] = $user['name'] = $contact['display_name'];
  $params['cms_pass'] = $user['pass'] =  substr(str_shuffle("abcefghijklmnopqrstuvwxyz"), 0, 8);
  $user['uid'] = $config->userSystem->createUser($params, 'email') ;
  $user['mail'] = $params['mail'];

  $userobj = (object) $user;
  //civi doesn't do this when created off Civi Form
  // in order for dedupe finder to work it needs params in $_POST (shoud b able to pass in but...)
  // this is a bit clunky
  if(empty($_POST['first_name'])){
    $_POST['first_name']= $contact['first_name'];
    $firstName=1;
  }
    if(empty($_POST['last_name'])){
    $_POST['last_name']= $contact['last_name'];
    $lastName=1;
  }

  CRM_Core_BAO_UFMatch::synchronizeUFMatch($userobj, $userobj->uid, $contact['email'], 'Drupal');
  if(!empty($lastName)){
    unset($_POST['last_name']);
  }

  if(!empty($firstName)){
    unset($_POST['first_name']);
  }
  return gift_memberships_singleton($user);
}
/*
 * Function to store user array
 * @return array $user user array
 */
function gift_memberships_singleton($user = null){
  static $stasheduser = null;
  if(!empty($user)){
    $stasheduser = $user;
  }
  return $stasheduser;
}
